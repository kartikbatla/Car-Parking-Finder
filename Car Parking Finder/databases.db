-- Create a table for storing user information
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    location TEXT NOT NULL
);

-- Create a table to store parking spot information
CREATE TABLE IF NOT EXISTS parking_spots (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    location TEXT NOT NULL,
    status TEXT NOT NULL CHECK(status IN ('Available', 'Occupied')),
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create a table to store parking detection results (e.g., from main.run_parking_detection)
CREATE TABLE IF NOT EXISTS parking_detection_results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    parking_spot_id INTEGER,
    detection_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    result TEXT NOT NULL,
    FOREIGN KEY (parking_spot_id) REFERENCES parking_spots(id)
);

-- Create a table to store any logs or history of users' requests for parking spots
CREATE TABLE IF NOT EXISTS user_requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    parking_spot_id INTEGER,
    request_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    request_status TEXT NOT NULL CHECK(request_status IN ('Pending', 'Confirmed', 'Rejected')),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (parking_spot_id) REFERENCES parking_spots(id)
);

-- Create an index for faster searches (optional)
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_parking_spots_location ON parking_spots(location);
CREATE INDEX IF NOT EXISTS idx_parking_detection_results_parking_spot_id ON parking_detection_results(parking_spot_id);
CREATE INDEX IF NOT EXISTS idx_user_requests_user_id ON user_requests(user_id);
